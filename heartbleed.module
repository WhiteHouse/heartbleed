<?php
/**
 * @file
 * Heartbleed module.
 */

/**
 * Implements hook_menu().
 */
function heartbleed_menu() {
  $items = array();

  $items['user/heartbleed'] = array(
    'page callback' => 'heartbleed_page',
    'access arguments' => array('access content'),
  );

  $items['admin/config/people/heartbleed'] = array(
    'title' => 'Heartbleed',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('heartbleed_admin_form'),
    'access arguments' => array('administer users'),
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function heartbleed_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
    // Add additional submit handler.
    $form['#submit'][] = 'heartbleed_login_submit';
  }
}

function heartbleed_admin_form($form, &$form_state) {
  $form = array();

  $form['heartbleed_global_password_reset_date'] = array(
    '#type' => 'textfield',
    '#title' => t('TODO timestamp name'),
    '#default_value' => variable_get('heartbleed_global_password_reset_date', 1396828800),
    '#description' => t('Look up unix timestamp !here', array('!here' => url('http://unixtimestamp.com/'))),
  );
  $form['heartbleed_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Heartbleed Message'),
    '#description' => t('Message to be displayed to users'),
    '#default_value' => variable_get('heartbleed_message', t('Please reset your password. More information: http://heartbleed.com/')),
  );

  return system_settings_form($form);
}

/**
 * Submit handler for heartbleed reset.
 *
 * Upon successful login, force logout and redirect user to /heartbleed page
 * where they will receive instructions on how to reset their password.
 */
function heartbleed_login_submit($form_id, &$form_state) {
  // Check if user needs reset.
  $force_reset = heartbleed_force_reset();
  if (!$force_reset) {
    // Nothing to do here.
    return;
  }

  // Copied from user_logout().
  global $user;
  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
  module_invoke_all('user_logout', $user);
  // Destroy the current session, and reset $user to the anonymous user.
  session_destroy();
  // Trick Drupal, to override destination where set.
  $_GET['destination'] = 'user/heartbleed';
  drupal_goto('user/heartbleed');
}

/**
 * Page callback for /heartbleed.
 */
function heartbleed_page() {
  $message = variable_get('heartbleed_message', 'Please reset your password.  More information: http://heartbleed.com/');
  drupal_set_message(t($message), 'error');
  module_load_include('inc', 'user', 'user.pages');
  return drupal_get_form('user_pass');
}

/**
 * Check if user needs to reset password.
 */
function heartbleed_force_reset() {
  global $user;
  // Default April 7, 2014.
  $heartbleed_global_password_reset_date = variable_get('heartbleed_global_password_reset_date', 1396828800);
  // Last time password was reset?
  $last_password_reset_date = heartbleed_get_last_pass_update($user->uid);
  return ($last_password_reset_date < $heartbleed_global_password_reset_date) ? TRUE : FALSE;
}

/**
 * Implements hook_user_update().
 */
function heartbleed_user_update(&$edit, $account, $category) {
  // Is user updating password? If so, log event in heartbleed table.
  if (isset($edit['pass'])) {
    // Pass property is only set when password is being update. Proceed.
    db_merge('heartbleed')
      ->key(array('uid' => $account->uid))
      ->fields(array(
        'uid' => $account->uid,
        'pass_last_updated' => time(),
      ))
      ->execute();
  }
}


/**
 * Provide last password reset timestamp.
 *
 * @param int $uid
 *   User id.
 *
 * @return int
 *   Timestamp for when user last reset pass if availble. False if not.
 */
function heartbleed_get_last_pass_update($uid) {
  $query = db_query('SELECT * FROM {heartbleed} WHERE uid = :uid',
    array(':uid' => $uid));
  $result = $query->fetchAll();
  if (count($result) < 1) {
    // No results. User hasn't updated password since Heartbleed was installed.
    $pass_last_updated = 0;
  }
  elseif (count($result) == 1) {
    // Return pass_last_updated timestamp.
    $pass_last_updated = $result[0]->pass_last_updated;
  }
  else {
    // Something is wrong.
    $pass_last_updated = 0;
    watchdog('heartbleed', t('Something is wrong. The same uid is in the= heartbleed table more than once.'), WATCHDOG_ERROR);
  }

  return $pass_last_updated;
}

/******************************************************************************
 * Taking over user/reset below is probably too aggressive. Leaving code there
 * commented out in case it's helpful to revisit later.
 *****************************************************************************/

/**
 * Implements hook_menu_alter().
 */
/*
function heartbleed_menu_alter(&$items) {
  // Take over user reset so we can effectively log the event. There's no way
  // to tell otherwise (via hook_user_update) that the user is resetting their
  // password.
  $items['user/reset/%/%/%']['page callback'] = 'heartbleed_pass_reset';
}
// */

/**
 * Callback taking over user/reset/%/%/%.
 */
/*
function heartbleed_pass_reset($uid, $timestamp, $hashed_pass) {
  // Use logic from user.pages.inc to verify legitimate reset request.
  $users = user_load_multiple(array($uid), array('status' => '1'));
  $account = reset($users);
  if ($hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {

    // It's a legitimate request. Update last_reset value in heartbleed table.
    db_query('');
  }
  // Now proceed to regular password reset page we took over from user module.
  return drupal_get_form('user_pass_reset', $uid, $timestamp, $hashed_pass);
}
// */
